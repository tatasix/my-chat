// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	scriptLogFieldNames          = builder.RawFieldNames(&ScriptLog{})
	scriptLogRows                = strings.Join(scriptLogFieldNames, ",")
	scriptLogRowsExpectAutoSet   = strings.Join(stringx.Remove(scriptLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	scriptLogRowsWithPlaceHolder = strings.Join(stringx.Remove(scriptLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheScriptLogIdPrefix = "cache:scriptLog:id:"
)

type (
	scriptLogModel interface {
		Insert(ctx context.Context, data *ScriptLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ScriptLog, error)
		Update(ctx context.Context, data *ScriptLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultScriptLogModel struct {
		sqlc.CachedConn
		table string
	}

	ScriptLog struct {
		Id             int64        `db:"id"`
		ScriptId       int64        `db:"script_id"`       // 脚本id
		Result         string       `db:"result"`          // 执行结果
		ExecutionCount int64        `db:"execution_count"` // 执行次数
		Status         int64        `db:"status"`          // 执行状态，1开始执行，2执行中，3执行成功，4执行失败
		EndAt          sql.NullTime `db:"end_at"`          // 结束时间
		CreatedAt      time.Time    `db:"created_at"`      // 创建时间
		UpdatedAt      time.Time    `db:"updated_at"`      // 更新时间
	}
)

func newScriptLogModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultScriptLogModel {
	return &defaultScriptLogModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`script_log`",
	}
}

func (m *defaultScriptLogModel) Delete(ctx context.Context, id int64) error {
	scriptLogIdKey := fmt.Sprintf("%s%v", cacheScriptLogIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, scriptLogIdKey)
	return err
}

func (m *defaultScriptLogModel) FindOne(ctx context.Context, id int64) (*ScriptLog, error) {
	scriptLogIdKey := fmt.Sprintf("%s%v", cacheScriptLogIdPrefix, id)
	var resp ScriptLog
	err := m.QueryRowCtx(ctx, &resp, scriptLogIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", scriptLogRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultScriptLogModel) Insert(ctx context.Context, data *ScriptLog) (sql.Result, error) {
	scriptLogIdKey := fmt.Sprintf("%s%v", cacheScriptLogIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, scriptLogRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ScriptId, data.Result, data.ExecutionCount, data.Status, data.EndAt)
	}, scriptLogIdKey)
	return ret, err
}

func (m *defaultScriptLogModel) Update(ctx context.Context, data *ScriptLog) error {
	scriptLogIdKey := fmt.Sprintf("%s%v", cacheScriptLogIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, scriptLogRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ScriptId, data.Result, data.ExecutionCount, data.Status, data.EndAt, data.Id)
	}, scriptLogIdKey)
	return err
}

func (m *defaultScriptLogModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheScriptLogIdPrefix, primary)
}

func (m *defaultScriptLogModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", scriptLogRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultScriptLogModel) tableName() string {
	return m.table
}
