// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	questionnaireQuestionFieldNames          = builder.RawFieldNames(&QuestionnaireQuestion{})
	questionnaireQuestionRows                = strings.Join(questionnaireQuestionFieldNames, ",")
	questionnaireQuestionRowsExpectAutoSet   = strings.Join(stringx.Remove(questionnaireQuestionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	questionnaireQuestionRowsWithPlaceHolder = strings.Join(stringx.Remove(questionnaireQuestionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheQuestionnaireQuestionIdPrefix = "cache:questionnaireQuestion:id:"
)

type (
	questionnaireQuestionModel interface {
		Insert(ctx context.Context, data *QuestionnaireQuestion) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*QuestionnaireQuestion, error)
		Update(ctx context.Context, data *QuestionnaireQuestion) error
		Delete(ctx context.Context, id int64) error
	}

	defaultQuestionnaireQuestionModel struct {
		sqlc.CachedConn
		table string
	}

	QuestionnaireQuestion struct {
		Id           int64     `db:"id"`
		OpenKfId     string    `db:"open_kf_id"`    // 客服标识
		QuestionType int64     `db:"question_type"` // 1 判断 2 选择 3 程度
		ScoreType    int64     `db:"score_type"`    // 计分类型，详情对应customer_config.config字段内容
		Question     string    `db:"question"`      // 问题的内容
		Sort         int64     `db:"sort"`          // 排序
		Option       string    `db:"option"`        // 问题的答案
		CreatedAt    time.Time `db:"created_at"`    // 创建时间
		UpdatedAt    time.Time `db:"updated_at"`    // 更新时间
		IsDeleted    int64     `db:"is_deleted"`    // 是否删除
	}
)

func newQuestionnaireQuestionModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultQuestionnaireQuestionModel {
	return &defaultQuestionnaireQuestionModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`questionnaire_question`",
	}
}

func (m *defaultQuestionnaireQuestionModel) Delete(ctx context.Context, id int64) error {
	questionnaireQuestionIdKey := fmt.Sprintf("%s%v", cacheQuestionnaireQuestionIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, questionnaireQuestionIdKey)
	return err
}

func (m *defaultQuestionnaireQuestionModel) FindOne(ctx context.Context, id int64) (*QuestionnaireQuestion, error) {
	questionnaireQuestionIdKey := fmt.Sprintf("%s%v", cacheQuestionnaireQuestionIdPrefix, id)
	var resp QuestionnaireQuestion
	err := m.QueryRowCtx(ctx, &resp, questionnaireQuestionIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", questionnaireQuestionRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultQuestionnaireQuestionModel) Insert(ctx context.Context, data *QuestionnaireQuestion) (sql.Result, error) {
	questionnaireQuestionIdKey := fmt.Sprintf("%s%v", cacheQuestionnaireQuestionIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, questionnaireQuestionRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.OpenKfId, data.QuestionType, data.ScoreType, data.Question, data.Sort, data.Option, data.IsDeleted)
	}, questionnaireQuestionIdKey)
	return ret, err
}

func (m *defaultQuestionnaireQuestionModel) Update(ctx context.Context, data *QuestionnaireQuestion) error {
	questionnaireQuestionIdKey := fmt.Sprintf("%s%v", cacheQuestionnaireQuestionIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, questionnaireQuestionRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.OpenKfId, data.QuestionType, data.ScoreType, data.Question, data.Sort, data.Option, data.IsDeleted, data.Id)
	}, questionnaireQuestionIdKey)
	return err
}

func (m *defaultQuestionnaireQuestionModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheQuestionnaireQuestionIdPrefix, primary)
}

func (m *defaultQuestionnaireQuestionModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", questionnaireQuestionRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultQuestionnaireQuestionModel) tableName() string {
	return m.table
}
