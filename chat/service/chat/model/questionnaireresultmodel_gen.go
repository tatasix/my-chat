// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	questionnaireResultFieldNames          = builder.RawFieldNames(&QuestionnaireResult{})
	questionnaireResultRows                = strings.Join(questionnaireResultFieldNames, ",")
	questionnaireResultRowsExpectAutoSet   = strings.Join(stringx.Remove(questionnaireResultFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	questionnaireResultRowsWithPlaceHolder = strings.Join(stringx.Remove(questionnaireResultFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheQuestionnaireResultIdPrefix = "cache:questionnaireResult:id:"
)

type (
	questionnaireResultModel interface {
		Insert(ctx context.Context, data *QuestionnaireResult) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*QuestionnaireResult, error)
		Update(ctx context.Context, data *QuestionnaireResult) error
		Delete(ctx context.Context, id int64) error
	}

	defaultQuestionnaireResultModel struct {
		sqlc.CachedConn
		table string
	}

	QuestionnaireResult struct {
		Id         int64           `db:"id"`
		RelationId int64           `db:"relation_id"` // 关联id
		User       string          `db:"user"`        // weCom用户标识/customer用户标识
		OpenKfId   string          `db:"open_kf_id"`  // 客服标识
		Score      sql.NullFloat64 `db:"score"`       // 分数
		ScoreType  int64           `db:"score_type"`  // 计分类型，详情对应customer_config.config字段内容
		Status     int64           `db:"status"`      // 状态，100 最终态
		Result     string          `db:"result"`      // 结论
		CreatedAt  time.Time       `db:"created_at"`  // 创建时间
		UpdatedAt  time.Time       `db:"updated_at"`  // 更新时间
		IsDeleted  int64           `db:"is_deleted"`  // 是否删除
		Mbti       string          `db:"mbti"`        // mbti 类型
	}
)

func newQuestionnaireResultModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultQuestionnaireResultModel {
	return &defaultQuestionnaireResultModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`questionnaire_result`",
	}
}

func (m *defaultQuestionnaireResultModel) Delete(ctx context.Context, id int64) error {
	questionnaireResultIdKey := fmt.Sprintf("%s%v", cacheQuestionnaireResultIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, questionnaireResultIdKey)
	return err
}

func (m *defaultQuestionnaireResultModel) FindOne(ctx context.Context, id int64) (*QuestionnaireResult, error) {
	questionnaireResultIdKey := fmt.Sprintf("%s%v", cacheQuestionnaireResultIdPrefix, id)
	var resp QuestionnaireResult
	err := m.QueryRowCtx(ctx, &resp, questionnaireResultIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", questionnaireResultRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultQuestionnaireResultModel) Insert(ctx context.Context, data *QuestionnaireResult) (sql.Result, error) {
	questionnaireResultIdKey := fmt.Sprintf("%s%v", cacheQuestionnaireResultIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, questionnaireResultRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.RelationId, data.User, data.OpenKfId, data.Score, data.ScoreType, data.Status, data.Result, data.IsDeleted, data.Mbti)
	}, questionnaireResultIdKey)
	return ret, err
}

func (m *defaultQuestionnaireResultModel) Update(ctx context.Context, data *QuestionnaireResult) error {
	questionnaireResultIdKey := fmt.Sprintf("%s%v", cacheQuestionnaireResultIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, questionnaireResultRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.RelationId, data.User, data.OpenKfId, data.Score, data.ScoreType, data.Status, data.Result, data.IsDeleted, data.Mbti, data.Id)
	}, questionnaireResultIdKey)
	return err
}

func (m *defaultQuestionnaireResultModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheQuestionnaireResultIdPrefix, primary)
}

func (m *defaultQuestionnaireResultModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", questionnaireResultRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultQuestionnaireResultModel) tableName() string {
	return m.table
}
