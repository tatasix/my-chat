// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	stateFieldNames          = builder.RawFieldNames(&State{})
	stateRows                = strings.Join(stateFieldNames, ",")
	stateRowsExpectAutoSet   = strings.Join(stringx.Remove(stateFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	stateRowsWithPlaceHolder = strings.Join(stringx.Remove(stateFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheStateIdPrefix = "cache:state:id:"
)

type (
	stateModel interface {
		Insert(ctx context.Context, data *State) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*State, error)
		Update(ctx context.Context, data *State) error
		Delete(ctx context.Context, id int64) error
	}

	defaultStateModel struct {
		sqlc.CachedConn
		table string
	}

	State struct {
		Id        int64        `db:"id"`
		User      string       `db:"user"`       // weCom用户标识/customer用户标识
		KfId      string       `db:"kf_id"`      // 客服标识
		State     int64        `db:"state"`      // 状态:1待处理，2已处理
		Date      sql.NullTime `db:"date"`       // 日期
		CreatedAt time.Time    `db:"created_at"` // 创建时间
		UpdatedAt time.Time    `db:"updated_at"` // 更新时间
		IsDeleted int64        `db:"is_deleted"` // 是否删除，0否，1是
	}
)

func newStateModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultStateModel {
	return &defaultStateModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`state`",
	}
}

func (m *defaultStateModel) Delete(ctx context.Context, id int64) error {
	stateIdKey := fmt.Sprintf("%s%v", cacheStateIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, stateIdKey)
	return err
}

func (m *defaultStateModel) FindOne(ctx context.Context, id int64) (*State, error) {
	stateIdKey := fmt.Sprintf("%s%v", cacheStateIdPrefix, id)
	var resp State
	err := m.QueryRowCtx(ctx, &resp, stateIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", stateRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStateModel) Insert(ctx context.Context, data *State) (sql.Result, error) {
	stateIdKey := fmt.Sprintf("%s%v", cacheStateIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, stateRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.User, data.KfId, data.State, data.Date, data.IsDeleted)
	}, stateIdKey)
	return ret, err
}

func (m *defaultStateModel) Update(ctx context.Context, data *State) error {
	stateIdKey := fmt.Sprintf("%s%v", cacheStateIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, stateRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.User, data.KfId, data.State, data.Date, data.IsDeleted, data.Id)
	}, stateIdKey)
	return err
}

func (m *defaultStateModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheStateIdPrefix, primary)
}

func (m *defaultStateModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", stateRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultStateModel) tableName() string {
	return m.table
}
