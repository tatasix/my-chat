// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	rightsRecordFieldNames          = builder.RawFieldNames(&RightsRecord{})
	rightsRecordRows                = strings.Join(rightsRecordFieldNames, ",")
	rightsRecordRowsExpectAutoSet   = strings.Join(stringx.Remove(rightsRecordFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	rightsRecordRowsWithPlaceHolder = strings.Join(stringx.Remove(rightsRecordFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheRightsRecordIdPrefix = "cache:rightsRecord:id:"
)

type (
	rightsRecordModel interface {
		Insert(ctx context.Context, data *RightsRecord) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RightsRecord, error)
		Update(ctx context.Context, data *RightsRecord) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRightsRecordModel struct {
		sqlc.CachedConn
		table string
	}

	RightsRecord struct {
		Id            int64     `db:"id"`
		RightsId      int64     `db:"rights_id"`
		RightsTimesId int64     `db:"rights_times_id"`
		RelationId    int64     `db:"relation_id"` // 关联id
		User          string    `db:"user"`        // 用户标识
		OpenKfId      string    `db:"open_kf_id"`  // 客服标识
		CreatedAt     time.Time `db:"created_at"`  // 创建时间
		UpdatedAt     time.Time `db:"updated_at"`  // 更新时间
		IsDeleted     int64     `db:"is_deleted"`  // 是否删除，0否，1是
	}
)

func newRightsRecordModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultRightsRecordModel {
	return &defaultRightsRecordModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`rights_record`",
	}
}

func (m *defaultRightsRecordModel) Delete(ctx context.Context, id int64) error {
	rightsRecordIdKey := fmt.Sprintf("%s%v", cacheRightsRecordIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, rightsRecordIdKey)
	return err
}

func (m *defaultRightsRecordModel) FindOne(ctx context.Context, id int64) (*RightsRecord, error) {
	rightsRecordIdKey := fmt.Sprintf("%s%v", cacheRightsRecordIdPrefix, id)
	var resp RightsRecord
	err := m.QueryRowCtx(ctx, &resp, rightsRecordIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", rightsRecordRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRightsRecordModel) Insert(ctx context.Context, data *RightsRecord) (sql.Result, error) {
	rightsRecordIdKey := fmt.Sprintf("%s%v", cacheRightsRecordIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, rightsRecordRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.RightsId, data.RightsTimesId, data.RelationId, data.User, data.OpenKfId, data.IsDeleted)
	}, rightsRecordIdKey)
	return ret, err
}

func (m *defaultRightsRecordModel) Update(ctx context.Context, data *RightsRecord) error {
	rightsRecordIdKey := fmt.Sprintf("%s%v", cacheRightsRecordIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, rightsRecordRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.RightsId, data.RightsTimesId, data.RelationId, data.User, data.OpenKfId, data.IsDeleted, data.Id)
	}, rightsRecordIdKey)
	return err
}

func (m *defaultRightsRecordModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheRightsRecordIdPrefix, primary)
}

func (m *defaultRightsRecordModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", rightsRecordRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRightsRecordModel) tableName() string {
	return m.table
}
