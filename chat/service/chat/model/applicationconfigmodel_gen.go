// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	applicationConfigFieldNames          = builder.RawFieldNames(&ApplicationConfig{})
	applicationConfigRows                = strings.Join(applicationConfigFieldNames, ",")
	applicationConfigRowsExpectAutoSet   = strings.Join(stringx.Remove(applicationConfigFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	applicationConfigRowsWithPlaceHolder = strings.Join(stringx.Remove(applicationConfigFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheApplicationConfigIdPrefix = "cache:applicationConfig:id:"
)

type (
	applicationConfigModel interface {
		Insert(ctx context.Context, data *ApplicationConfig) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ApplicationConfig, error)
		Update(ctx context.Context, data *ApplicationConfig) error
		Delete(ctx context.Context, id int64) error
	}

	defaultApplicationConfigModel struct {
		sqlc.CachedConn
		table string
	}

	ApplicationConfig struct {
		Id               int64           `db:"id"`
		AgentId          int64           `db:"agent_id"`           // 应用ID
		AgentSecret      string          `db:"agent_secret"`       // 应用secret
		AgentName        string          `db:"agent_name"`         // 应用名
		Model            string          `db:"model"`              // model
		PostModel        string          `db:"post_model"`         // 发送请求的model
		BasePrompt       string          `db:"base_prompt"`        // openai 基础设定（可选）
		Welcome          string          `db:"welcome"`            // 进入应用时的欢迎语
		GroupEnable      bool            `db:"group_enable"`       // 是否启用ChatGPT应用内部交流群
		GroupName        string          `db:"group_name"`         // ChatGPT群名
		GroupChatId      string          `db:"group_chat_id"`      // ChatGPT应用内部交流群chat_id
		EmbeddingEnable  bool            `db:"embedding_enable"`   // 是否启用embedding
		EmbeddingMode    string          `db:"embedding_mode"`     // embedding的搜索模式
		Score            sql.NullFloat64 `db:"score"`              // 分数
		TopK             int64           `db:"top_k"`              // topK
		ClearContextTime int64           `db:"clear_context_time"` // 需要清理上下文的时间，按分配置，默认0不清理
		CreatedAt        time.Time       `db:"created_at"`         // 创建时间
		UpdatedAt        time.Time       `db:"updated_at"`         // 更新时间
		IsDeleted        int64           `db:"is_deleted"`         // 是否删除
	}
)

func newApplicationConfigModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultApplicationConfigModel {
	return &defaultApplicationConfigModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`application_config`",
	}
}

func (m *defaultApplicationConfigModel) Delete(ctx context.Context, id int64) error {
	applicationConfigIdKey := fmt.Sprintf("%s%v", cacheApplicationConfigIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set is_deleted=1 where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, applicationConfigIdKey)
	return err
}

func (m *defaultApplicationConfigModel) FindOne(ctx context.Context, id int64) (*ApplicationConfig, error) {
	applicationConfigIdKey := fmt.Sprintf("%s%v", cacheApplicationConfigIdPrefix, id)
	var resp ApplicationConfig
	err := m.QueryRowCtx(ctx, &resp, applicationConfigIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", applicationConfigRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultApplicationConfigModel) Insert(ctx context.Context, data *ApplicationConfig) (sql.Result, error) {
	applicationConfigIdKey := fmt.Sprintf("%s%v", cacheApplicationConfigIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, applicationConfigRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.AgentId, data.AgentSecret, data.AgentName, data.Model, data.PostModel, data.BasePrompt, data.Welcome, data.GroupEnable, data.GroupName, data.GroupChatId, data.EmbeddingEnable, data.EmbeddingMode, data.Score, data.TopK, data.ClearContextTime, data.IsDeleted)
	}, applicationConfigIdKey)
	return ret, err
}

func (m *defaultApplicationConfigModel) Update(ctx context.Context, data *ApplicationConfig) error {
	applicationConfigIdKey := fmt.Sprintf("%s%v", cacheApplicationConfigIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, applicationConfigRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.AgentId, data.AgentSecret, data.AgentName, data.Model, data.PostModel, data.BasePrompt, data.Welcome, data.GroupEnable, data.GroupName, data.GroupChatId, data.EmbeddingEnable, data.EmbeddingMode, data.Score, data.TopK, data.ClearContextTime, data.IsDeleted, data.Id)
	}, applicationConfigIdKey)
	return err
}

func (m *defaultApplicationConfigModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheApplicationConfigIdPrefix, primary)
}

func (m *defaultApplicationConfigModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", applicationConfigRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultApplicationConfigModel) tableName() string {
	return m.table
}
