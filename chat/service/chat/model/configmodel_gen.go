// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	configFieldNames          = builder.RawFieldNames(&Config{})
	configRows                = strings.Join(configFieldNames, ",")
	configRowsExpectAutoSet   = strings.Join(stringx.Remove(configFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	configRowsWithPlaceHolder = strings.Join(stringx.Remove(configFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheConfigIdPrefix = "cache:config:id:"
)

type (
	configModel interface {
		Insert(ctx context.Context, data *Config) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Config, error)
		Update(ctx context.Context, data *Config) error
		Delete(ctx context.Context, id int64) error
	}

	defaultConfigModel struct {
		sqlc.CachedConn
		table string
	}

	Config struct {
		Id          int64     `db:"id"`
		ConfigType  int64     `db:"config_type"` // 配置类型：1，openai key
		Name        string    `db:"name"`        // 配置名
		Description string    `db:"description"` // 配置描述
		Value       string    `db:"value"`       // 配置内容
		CreatedBy   string    `db:"created_by"`  // 创建人
		UpdatedBy   string    `db:"updated_by"`  // 更新人
		CreatedAt   time.Time `db:"created_at"`  // 创建时间
		UpdatedAt   time.Time `db:"updated_at"`  // 更新时间
		IsDeleted   int64     `db:"is_deleted"`  // 是否删除
	}
)

func newConfigModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultConfigModel {
	return &defaultConfigModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`config`",
	}
}

func (m *defaultConfigModel) Delete(ctx context.Context, id int64) error {
	configIdKey := fmt.Sprintf("%s%v", cacheConfigIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, configIdKey)
	return err
}

func (m *defaultConfigModel) FindOne(ctx context.Context, id int64) (*Config, error) {
	configIdKey := fmt.Sprintf("%s%v", cacheConfigIdPrefix, id)
	var resp Config
	err := m.QueryRowCtx(ctx, &resp, configIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", configRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultConfigModel) Insert(ctx context.Context, data *Config) (sql.Result, error) {
	configIdKey := fmt.Sprintf("%s%v", cacheConfigIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, configRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ConfigType, data.Name, data.Description, data.Value, data.CreatedBy, data.UpdatedBy, data.IsDeleted)
	}, configIdKey)
	return ret, err
}

func (m *defaultConfigModel) Update(ctx context.Context, data *Config) error {
	configIdKey := fmt.Sprintf("%s%v", cacheConfigIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, configRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ConfigType, data.Name, data.Description, data.Value, data.CreatedBy, data.UpdatedBy, data.IsDeleted, data.Id)
	}, configIdKey)
	return err
}

func (m *defaultConfigModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheConfigIdPrefix, primary)
}

func (m *defaultConfigModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", configRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultConfigModel) tableName() string {
	return m.table
}
