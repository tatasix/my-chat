// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	resourceUsageFieldNames          = builder.RawFieldNames(&ResourceUsage{})
	resourceUsageRows                = strings.Join(resourceUsageFieldNames, ",")
	resourceUsageRowsExpectAutoSet   = strings.Join(stringx.Remove(resourceUsageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	resourceUsageRowsWithPlaceHolder = strings.Join(stringx.Remove(resourceUsageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheResourceUsageIdPrefix = "cache:resourceUsage:id:"
)

type (
	resourceUsageModel interface {
		Insert(ctx context.Context, data *ResourceUsage) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ResourceUsage, error)
		Update(ctx context.Context, data *ResourceUsage) error
		Delete(ctx context.Context, id int64) error
	}

	defaultResourceUsageModel struct {
		sqlc.CachedConn
		table string
	}

	ResourceUsage struct {
		Id        int64     `db:"id"`
		User      string    `db:"user"` // 微信客户的external_userid
		Date      time.Time `db:"date"`
		Hour      int64     `db:"hour"`       // 时间
		Times     int64     `db:"times"`      // 频次
		Token     int64     `db:"token"`      // token
		CreatedAt time.Time `db:"created_at"` // 创建时间
		UpdatedAt time.Time `db:"updated_at"` // 更新时间
	}
)

func newResourceUsageModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultResourceUsageModel {
	return &defaultResourceUsageModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`resource_usage`",
	}
}

func (m *defaultResourceUsageModel) Delete(ctx context.Context, id int64) error {
	resourceUsageIdKey := fmt.Sprintf("%s%v", cacheResourceUsageIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, resourceUsageIdKey)
	return err
}

func (m *defaultResourceUsageModel) FindOne(ctx context.Context, id int64) (*ResourceUsage, error) {
	resourceUsageIdKey := fmt.Sprintf("%s%v", cacheResourceUsageIdPrefix, id)
	var resp ResourceUsage
	err := m.QueryRowCtx(ctx, &resp, resourceUsageIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", resourceUsageRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultResourceUsageModel) Insert(ctx context.Context, data *ResourceUsage) (sql.Result, error) {
	resourceUsageIdKey := fmt.Sprintf("%s%v", cacheResourceUsageIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, resourceUsageRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.User, data.Date, data.Hour, data.Times, data.Token)
	}, resourceUsageIdKey)
	return ret, err
}

func (m *defaultResourceUsageModel) Update(ctx context.Context, data *ResourceUsage) error {
	resourceUsageIdKey := fmt.Sprintf("%s%v", cacheResourceUsageIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, resourceUsageRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.User, data.Date, data.Hour, data.Times, data.Token, data.Id)
	}, resourceUsageIdKey)
	return err
}

func (m *defaultResourceUsageModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheResourceUsageIdPrefix, primary)
}

func (m *defaultResourceUsageModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", resourceUsageRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultResourceUsageModel) tableName() string {
	return m.table
}
