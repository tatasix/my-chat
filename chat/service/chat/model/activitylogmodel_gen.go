// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	activityLogFieldNames          = builder.RawFieldNames(&ActivityLog{})
	activityLogRows                = strings.Join(activityLogFieldNames, ",")
	activityLogRowsExpectAutoSet   = strings.Join(stringx.Remove(activityLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	activityLogRowsWithPlaceHolder = strings.Join(stringx.Remove(activityLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheActivityLogIdPrefix = "cache:activityLog:id:"
)

type (
	activityLogModel interface {
		Insert(ctx context.Context, data *ActivityLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ActivityLog, error)
		Update(ctx context.Context, data *ActivityLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultActivityLogModel struct {
		sqlc.CachedConn
		table string
	}

	ActivityLog struct {
		Id        int64     `db:"id"`
		User      string    `db:"user"`     // 微信客户的external_userid
		OldUser   string    `db:"old_user"` // 微信客户的external_userid
		Type      int64     `db:"type"`
		BeginTime string    `db:"begin_time"`
		EndTime   string    `db:"end_time"`
		Duration  int64     `db:"duration"`   // 持续时间
		CreatedAt time.Time `db:"created_at"` // 创建时间
		UpdatedAt time.Time `db:"updated_at"` // 更新时间
	}
)

func newActivityLogModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultActivityLogModel {
	return &defaultActivityLogModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`activity_log`",
	}
}

func (m *defaultActivityLogModel) Delete(ctx context.Context, id int64) error {
	activityLogIdKey := fmt.Sprintf("%s%v", cacheActivityLogIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, activityLogIdKey)
	return err
}

func (m *defaultActivityLogModel) FindOne(ctx context.Context, id int64) (*ActivityLog, error) {
	activityLogIdKey := fmt.Sprintf("%s%v", cacheActivityLogIdPrefix, id)
	var resp ActivityLog
	err := m.QueryRowCtx(ctx, &resp, activityLogIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", activityLogRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActivityLogModel) Insert(ctx context.Context, data *ActivityLog) (sql.Result, error) {
	activityLogIdKey := fmt.Sprintf("%s%v", cacheActivityLogIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, activityLogRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.User, data.OldUser, data.Type, data.BeginTime, data.EndTime, data.Duration)
	}, activityLogIdKey)
	return ret, err
}

func (m *defaultActivityLogModel) Update(ctx context.Context, data *ActivityLog) error {
	activityLogIdKey := fmt.Sprintf("%s%v", cacheActivityLogIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, activityLogRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.User, data.OldUser, data.Type, data.BeginTime, data.EndTime, data.Duration, data.Id)
	}, activityLogIdKey)
	return err
}

func (m *defaultActivityLogModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheActivityLogIdPrefix, primary)
}

func (m *defaultActivityLogModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", activityLogRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActivityLogModel) tableName() string {
	return m.table
}
