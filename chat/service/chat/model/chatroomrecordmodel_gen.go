// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chatRoomRecordFieldNames          = builder.RawFieldNames(&ChatRoomRecord{})
	chatRoomRecordRows                = strings.Join(chatRoomRecordFieldNames, ",")
	chatRoomRecordRowsExpectAutoSet   = strings.Join(stringx.Remove(chatRoomRecordFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	chatRoomRecordRowsWithPlaceHolder = strings.Join(stringx.Remove(chatRoomRecordFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheChatRoomRecordIdPrefix = "cache:chatRoomRecord:id:"
)

type (
	chatRoomRecordModel interface {
		Insert(ctx context.Context, data *ChatRoomRecord) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ChatRoomRecord, error)
		Update(ctx context.Context, data *ChatRoomRecord) error
		Delete(ctx context.Context, id int64) error
	}

	defaultChatRoomRecordModel struct {
		sqlc.CachedConn
		table string
	}

	ChatRoomRecord struct {
		Id          int64     `db:"id"`
		ChannelId   int64     `db:"channel_id"`   // 频道id
		DialogueId  string    `db:"dialogue_id"`  // 对话id
		Status      int64     `db:"status"`       // 状态
		SendUserId  string    `db:"send_user_id"` // 用户
		KfId        string    `db:"kf_id"`        // 客服标识
		MessageType int64     `db:"message_type"` // 消息类型
		Message     string    `db:"message"`
		MessageId   string    `db:"message_id"` // message_id customer消息唯一ID
		CreateTime  time.Time `db:"create_time"`
		UpdateTime  time.Time `db:"update_time"`
	}
)

func newChatRoomRecordModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultChatRoomRecordModel {
	return &defaultChatRoomRecordModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`chat_room_record`",
	}
}

func (m *defaultChatRoomRecordModel) Delete(ctx context.Context, id int64) error {
	chatRoomRecordIdKey := fmt.Sprintf("%s%v", cacheChatRoomRecordIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, chatRoomRecordIdKey)
	return err
}

func (m *defaultChatRoomRecordModel) FindOne(ctx context.Context, id int64) (*ChatRoomRecord, error) {
	chatRoomRecordIdKey := fmt.Sprintf("%s%v", cacheChatRoomRecordIdPrefix, id)
	var resp ChatRoomRecord
	err := m.QueryRowCtx(ctx, &resp, chatRoomRecordIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatRoomRecordRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatRoomRecordModel) Insert(ctx context.Context, data *ChatRoomRecord) (sql.Result, error) {
	chatRoomRecordIdKey := fmt.Sprintf("%s%v", cacheChatRoomRecordIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, chatRoomRecordRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ChannelId, data.DialogueId, data.Status, data.SendUserId, data.KfId, data.MessageType, data.Message, data.MessageId)
	}, chatRoomRecordIdKey)
	return ret, err
}

func (m *defaultChatRoomRecordModel) Update(ctx context.Context, data *ChatRoomRecord) error {
	chatRoomRecordIdKey := fmt.Sprintf("%s%v", cacheChatRoomRecordIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, chatRoomRecordRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ChannelId, data.DialogueId, data.Status, data.SendUserId, data.KfId, data.MessageType, data.Message, data.MessageId, data.Id)
	}, chatRoomRecordIdKey)
	return err
}

func (m *defaultChatRoomRecordModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheChatRoomRecordIdPrefix, primary)
}

func (m *defaultChatRoomRecordModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatRoomRecordRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultChatRoomRecordModel) tableName() string {
	return m.table
}
