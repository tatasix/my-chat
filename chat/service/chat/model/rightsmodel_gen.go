// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	rightsFieldNames          = builder.RawFieldNames(&Rights{})
	rightsRows                = strings.Join(rightsFieldNames, ",")
	rightsRowsExpectAutoSet   = strings.Join(stringx.Remove(rightsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	rightsRowsWithPlaceHolder = strings.Join(stringx.Remove(rightsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheRightsIdPrefix = "cache:rights:id:"
)

type (
	rightsModel interface {
		Insert(ctx context.Context, data *Rights) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Rights, error)
		Update(ctx context.Context, data *Rights) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRightsModel struct {
		sqlc.CachedConn
		table string
	}

	Rights struct {
		Id         int64        `db:"id"`
		MessageId  string       `db:"message_id"` // message_id customer消息唯一ID
		User       string       `db:"user"`       // weCom用户标识/customer用户标识
		OpenKfId   string       `db:"open_kf_id"` // 客服标识
		PayType    int64        `db:"pay_type"`   // 1 次卡 2 月卡 3 年卡
		OutTradeNo string       `db:"out_trade_no"`
		PayMethod  int64        `db:"pay_method"`   // 1支付宝 2微信
		Price      int64        `db:"price"`        // 价格
		Period     int64        `db:"period"`       // 计算周期：1 按天算次数;2 不按时间计算次数
		Times      int64        `db:"times"`        // 次数
		Source     int64        `db:"source"`       // 1pc 2H5
		Status     int64        `db:"status"`       // 权益状态：1未付款 2付款成功 3权益已使用 4付款失败 5过期
		Reason     string       `db:"reason"`       // 原因
		Start      sql.NullTime `db:"start"`        // 开始时间
		End        sql.NullTime `db:"end"`          // 结束时间
		Snapshot   string       `db:"snapshot"`     // 快照
		CreatedAt  time.Time    `db:"created_at"`   // 创建时间
		UpdatedAt  time.Time    `db:"updated_at"`   // 更新时间
		AppleTxnId string       `db:"apple_txn_id"` // 苹果支付TransactionId
	}
)

func newRightsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultRightsModel {
	return &defaultRightsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`rights`",
	}
}

func (m *defaultRightsModel) Delete(ctx context.Context, id int64) error {
	rightsIdKey := fmt.Sprintf("%s%v", cacheRightsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, rightsIdKey)
	return err
}

func (m *defaultRightsModel) FindOne(ctx context.Context, id int64) (*Rights, error) {
	rightsIdKey := fmt.Sprintf("%s%v", cacheRightsIdPrefix, id)
	var resp Rights
	err := m.QueryRowCtx(ctx, &resp, rightsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", rightsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRightsModel) Insert(ctx context.Context, data *Rights) (sql.Result, error) {
	rightsIdKey := fmt.Sprintf("%s%v", cacheRightsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, rightsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.MessageId, data.User, data.OpenKfId, data.PayType, data.OutTradeNo, data.PayMethod, data.Price, data.Period, data.Times, data.Source, data.Status, data.Reason, data.Start, data.End, data.Snapshot, data.AppleTxnId)
	}, rightsIdKey)
	return ret, err
}

func (m *defaultRightsModel) Update(ctx context.Context, data *Rights) error {
	rightsIdKey := fmt.Sprintf("%s%v", cacheRightsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, rightsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.MessageId, data.User, data.OpenKfId, data.PayType, data.OutTradeNo, data.PayMethod, data.Price, data.Period, data.Times, data.Source, data.Status, data.Reason, data.Start, data.End, data.Snapshot, data.AppleTxnId, data.Id)
	}, rightsIdKey)
	return err
}

func (m *defaultRightsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheRightsIdPrefix, primary)
}

func (m *defaultRightsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", rightsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRightsModel) tableName() string {
	return m.table
}
