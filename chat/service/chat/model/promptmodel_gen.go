// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	promptFieldNames          = builder.RawFieldNames(&Prompt{})
	promptRows                = strings.Join(promptFieldNames, ",")
	promptRowsExpectAutoSet   = strings.Join(stringx.Remove(promptFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	promptRowsWithPlaceHolder = strings.Join(stringx.Remove(promptFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cachePromptIdPrefix = "cache:prompt:id:"
)

type (
	promptModel interface {
		Insert(ctx context.Context, data *Prompt) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Prompt, error)
		Update(ctx context.Context, data *Prompt) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPromptModel struct {
		sqlc.CachedConn
		table string
	}

	Prompt struct {
		Id        int64     `db:"id"`
		StateId   int64     `db:"state_id"`   // 状态
		KfId      string    `db:"kf_id"`      // 客服
		Title     string    `db:"title"`      // 用户反馈标题
		Prompt    string    `db:"prompt"`     // prompt
		UpdatedBy string    `db:"updated_by"` // 更新
		CreatedBy string    `db:"created_by"` // 创建
		CreatedAt time.Time `db:"created_at"` // 创建时间
		UpdatedAt time.Time `db:"updated_at"` // 更新时间
		IsDeleted int64     `db:"is_deleted"` // 是否删除，0否，1是
	}
)

func newPromptModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultPromptModel {
	return &defaultPromptModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`prompt`",
	}
}

func (m *defaultPromptModel) Delete(ctx context.Context, id int64) error {
	promptIdKey := fmt.Sprintf("%s%v", cachePromptIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, promptIdKey)
	return err
}

func (m *defaultPromptModel) FindOne(ctx context.Context, id int64) (*Prompt, error) {
	promptIdKey := fmt.Sprintf("%s%v", cachePromptIdPrefix, id)
	var resp Prompt
	err := m.QueryRowCtx(ctx, &resp, promptIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", promptRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPromptModel) Insert(ctx context.Context, data *Prompt) (sql.Result, error) {
	promptIdKey := fmt.Sprintf("%s%v", cachePromptIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, promptRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.StateId, data.KfId, data.Title, data.Prompt, data.UpdatedBy, data.CreatedBy, data.IsDeleted)
	}, promptIdKey)
	return ret, err
}

func (m *defaultPromptModel) Update(ctx context.Context, data *Prompt) error {
	promptIdKey := fmt.Sprintf("%s%v", cachePromptIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, promptRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.StateId, data.KfId, data.Title, data.Prompt, data.UpdatedBy, data.CreatedBy, data.IsDeleted, data.Id)
	}, promptIdKey)
	return err
}

func (m *defaultPromptModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePromptIdPrefix, primary)
}

func (m *defaultPromptModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", promptRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPromptModel) tableName() string {
	return m.table
}
