// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chatRecordFieldNames          = builder.RawFieldNames(&ChatRecord{})
	chatRecordRows                = strings.Join(chatRecordFieldNames, ",")
	chatRecordRowsExpectAutoSet   = strings.Join(stringx.Remove(chatRecordFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	chatRecordRowsMigragteExpectAutoSet   = strings.Join(chatRecordFieldNames, ",")
	chatRecordRowsWithPlaceHolder = strings.Join(stringx.Remove(chatRecordFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheChatRecordIdPrefix = "cache:chatRecord:id:"
)

type (
	chatRecordModel interface {
		Insert(ctx context.Context, data *ChatRecord) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ChatRecord, error)
		Update(ctx context.Context, data *ChatRecord) error
		Delete(ctx context.Context, id int64) error
	}

	defaultChatRecordModel struct {
		sqlc.CachedConn
		table string
	}

	ChatRecord struct {
		Id               int64     `db:"id"`
		RelationId       int64     `db:"relation_id"`        // 关联id
		User             string    `db:"user"`               // weCom用户标识/customer用户标识
		MessageId        string    `db:"message_id"`         // message_id customer消息唯一ID
		OpenKfId         string    `db:"open_kf_id"`         // 客服标识
		AgentId          int64     `db:"agent_id"`           // 应用ID
		Content          string    `db:"content"`            // 消息内容
		Emoji            int64     `db:"emoji"`              // emoji类型
		ChatType         int64     `db:"chat_type"`          // 聊天类型
		AnswerOrQuestion int64     `db:"answer_or_question"` // 问题还是答案:1问题，2答案
		MessageType      int64     `db:"message_type"`       // 消息类型
		State            int64     `db:"state"`              // 属于哪一步的聊天记录
		StateId          int64     `db:"state_id"`           // 属于哪一步的聊天记录
		CreatedAt        time.Time `db:"created_at"`         // 创建时间
		UpdatedAt        time.Time `db:"updated_at"`         // 更新时间
	}
)

func newChatRecordModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultChatRecordModel {
	return &defaultChatRecordModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`chat_record`",
	}
}

func (m *defaultChatRecordModel) Delete(ctx context.Context, id int64) error {
	chatRecordIdKey := fmt.Sprintf("%s%v", cacheChatRecordIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, chatRecordIdKey)
	return err
}

func (m *defaultChatRecordModel) FindOne(ctx context.Context, id int64) (*ChatRecord, error) {
	chatRecordIdKey := fmt.Sprintf("%s%v", cacheChatRecordIdPrefix, id)
	var resp ChatRecord
	err := m.QueryRowCtx(ctx, &resp, chatRecordIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatRecordRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatRecordModel) Insert(ctx context.Context, data *ChatRecord) (sql.Result, error) {
	chatRecordIdKey := fmt.Sprintf("%s%v", cacheChatRecordIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, chatRecordRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.RelationId, data.User, data.MessageId, data.OpenKfId, data.AgentId, data.Content, data.Emoji, data.ChatType, data.AnswerOrQuestion, data.MessageType, data.State, data.StateId)
	}, chatRecordIdKey)
	return ret, err
}

func (m *defaultChatRecordModel) Update(ctx context.Context, data *ChatRecord) error {
	chatRecordIdKey := fmt.Sprintf("%s%v", cacheChatRecordIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, chatRecordRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.RelationId, data.User, data.MessageId, data.OpenKfId, data.AgentId, data.Content, data.Emoji, data.ChatType, data.AnswerOrQuestion, data.MessageType, data.State, data.StateId, data.Id)
	}, chatRecordIdKey)
	return err
}

func (m *defaultChatRecordModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheChatRecordIdPrefix, primary)
}

func (m *defaultChatRecordModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatRecordRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultChatRecordModel) tableName() string {
	return m.table
}
