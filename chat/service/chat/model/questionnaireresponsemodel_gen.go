// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	questionnaireResponseFieldNames          = builder.RawFieldNames(&QuestionnaireResponse{})
	questionnaireResponseRows                = strings.Join(questionnaireResponseFieldNames, ",")
	questionnaireResponseRowsExpectAutoSet   = strings.Join(stringx.Remove(questionnaireResponseFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	questionnaireResponseRowsWithPlaceHolder = strings.Join(stringx.Remove(questionnaireResponseFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheQuestionnaireResponseIdPrefix = "cache:questionnaireResponse:id:"
)

type (
	questionnaireResponseModel interface {
		Insert(ctx context.Context, data *QuestionnaireResponse) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*QuestionnaireResponse, error)
		Update(ctx context.Context, data *QuestionnaireResponse) error
		Delete(ctx context.Context, id int64) error
	}

	defaultQuestionnaireResponseModel struct {
		sqlc.CachedConn
		table string
	}

	QuestionnaireResponse struct {
		Id             int64     `db:"id"`
		QuestionId     int64     `db:"question_id"`     // question id
		RelationId     int64     `db:"relation_id"`     // 关联id
		MessageId      string    `db:"message_id"`      // message_id customer消息唯一ID
		User           string    `db:"user"`            // weCom用户标识/customer用户标识
		OpenKfId       string    `db:"open_kf_id"`      // 客服标识
		Question       string    `db:"question"`        // 问题
		OptionId       int64     `db:"option_id"`       // 选项id
		Answer         string    `db:"answer"`          // 选项内容
		Score          int64     `db:"score"`           // 分数
		ScoreType      int64     `db:"score_type"`      // 计分类型，详情对应customer_config.config字段内容
		SnapshotOption string    `db:"snapshot_option"` // 快照选项
		CreatedAt      time.Time `db:"created_at"`      // 创建时间
		UpdatedAt      time.Time `db:"updated_at"`      // 更新时间
		IsDeleted      int64     `db:"is_deleted"`      // 是否删除
		Mbti           string    `db:"mbti"`            // mbti 答案类型
	}
)

func newQuestionnaireResponseModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultQuestionnaireResponseModel {
	return &defaultQuestionnaireResponseModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`questionnaire_response`",
	}
}

func (m *defaultQuestionnaireResponseModel) Delete(ctx context.Context, id int64) error {
	questionnaireResponseIdKey := fmt.Sprintf("%s%v", cacheQuestionnaireResponseIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, questionnaireResponseIdKey)
	return err
}

func (m *defaultQuestionnaireResponseModel) FindOne(ctx context.Context, id int64) (*QuestionnaireResponse, error) {
	questionnaireResponseIdKey := fmt.Sprintf("%s%v", cacheQuestionnaireResponseIdPrefix, id)
	var resp QuestionnaireResponse
	err := m.QueryRowCtx(ctx, &resp, questionnaireResponseIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", questionnaireResponseRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultQuestionnaireResponseModel) Insert(ctx context.Context, data *QuestionnaireResponse) (sql.Result, error) {
	questionnaireResponseIdKey := fmt.Sprintf("%s%v", cacheQuestionnaireResponseIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, questionnaireResponseRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.QuestionId, data.RelationId, data.MessageId, data.User, data.OpenKfId, data.Question, data.OptionId, data.Answer, data.Score, data.ScoreType, data.SnapshotOption, data.IsDeleted, data.Mbti)
	}, questionnaireResponseIdKey)
	return ret, err
}

func (m *defaultQuestionnaireResponseModel) Update(ctx context.Context, data *QuestionnaireResponse) error {
	questionnaireResponseIdKey := fmt.Sprintf("%s%v", cacheQuestionnaireResponseIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, questionnaireResponseRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.QuestionId, data.RelationId, data.MessageId, data.User, data.OpenKfId, data.Question, data.OptionId, data.Answer, data.Score, data.ScoreType, data.SnapshotOption, data.IsDeleted, data.Mbti, data.Id)
	}, questionnaireResponseIdKey)
	return err
}

func (m *defaultQuestionnaireResponseModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheQuestionnaireResponseIdPrefix, primary)
}

func (m *defaultQuestionnaireResponseModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", questionnaireResponseRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultQuestionnaireResponseModel) tableName() string {
	return m.table
}
