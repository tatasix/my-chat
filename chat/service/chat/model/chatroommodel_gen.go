// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chatRoomFieldNames          = builder.RawFieldNames(&ChatRoom{})
	chatRoomRows                = strings.Join(chatRoomFieldNames, ",")
	chatRoomRowsExpectAutoSet   = strings.Join(stringx.Remove(chatRoomFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	chatRoomRowsWithPlaceHolder = strings.Join(stringx.Remove(chatRoomFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheChatRoomIdPrefix = "cache:chatRoom:id:"
)

type (
	chatRoomModel interface {
		Insert(ctx context.Context, data *ChatRoom) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ChatRoom, error)
		Update(ctx context.Context, data *ChatRoom) error
		Delete(ctx context.Context, id int64) error
	}

	defaultChatRoomModel struct {
		sqlc.CachedConn
		table string
	}

	ChatRoom struct {
		Id          int64     `db:"id"`
		User        string    `db:"user"`        // 用户
		KfId        string    `db:"kf_id"`       // 客服标识
		Title       string    `db:"title"`       // 名称
		Description string    `db:"description"` // 描述
		ChannelId   int64     `db:"channel_id"`  // 频道id
		CreatedAt   time.Time `db:"created_at"`
		UpdatedAt   time.Time `db:"updated_at"`
		IsDeleted   int64     `db:"is_deleted"` // 是否删除
	}
)

func newChatRoomModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultChatRoomModel {
	return &defaultChatRoomModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`chat_room`",
	}
}

func (m *defaultChatRoomModel) Delete(ctx context.Context, id int64) error {
	chatRoomIdKey := fmt.Sprintf("%s%v", cacheChatRoomIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, chatRoomIdKey)
	return err
}

func (m *defaultChatRoomModel) FindOne(ctx context.Context, id int64) (*ChatRoom, error) {
	chatRoomIdKey := fmt.Sprintf("%s%v", cacheChatRoomIdPrefix, id)
	var resp ChatRoom
	err := m.QueryRowCtx(ctx, &resp, chatRoomIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatRoomRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatRoomModel) Insert(ctx context.Context, data *ChatRoom) (sql.Result, error) {
	chatRoomIdKey := fmt.Sprintf("%s%v", cacheChatRoomIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, chatRoomRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.User, data.KfId, data.Title, data.Description, data.ChannelId, data.IsDeleted)
	}, chatRoomIdKey)
	return ret, err
}

func (m *defaultChatRoomModel) Update(ctx context.Context, data *ChatRoom) error {
	chatRoomIdKey := fmt.Sprintf("%s%v", cacheChatRoomIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, chatRoomRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.User, data.KfId, data.Title, data.Description, data.ChannelId, data.IsDeleted, data.Id)
	}, chatRoomIdKey)
	return err
}

func (m *defaultChatRoomModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheChatRoomIdPrefix, primary)
}

func (m *defaultChatRoomModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatRoomRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultChatRoomModel) tableName() string {
	return m.table
}
