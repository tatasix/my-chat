// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userLikeFieldNames          = builder.RawFieldNames(&UserLike{})
	userLikeRows                = strings.Join(userLikeFieldNames, ",")
	userLikeRowsExpectAutoSet   = strings.Join(stringx.Remove(userLikeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userLikeRowsWithPlaceHolder = strings.Join(stringx.Remove(userLikeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUserLikeIdPrefix = "cache:userLike:id:"
)

type (
	userLikeModel interface {
		Insert(ctx context.Context, data *UserLike) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserLike, error)
		Update(ctx context.Context, data *UserLike) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserLikeModel struct {
		sqlc.CachedConn
		table string
	}

	UserLike struct {
		Id           int64     `db:"id"`
		User         string    `db:"user"`           // weCom用户标识/customer用户标识
		ChatRecordId string    `db:"chat_record_id"` // chat record 对应的 id
		CreatedAt    time.Time `db:"created_at"`     // 创建时间
		UpdatedAt    time.Time `db:"updated_at"`     // 更新时间
	}
)

func newUserLikeModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserLikeModel {
	return &defaultUserLikeModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_like`",
	}
}

func (m *defaultUserLikeModel) Delete(ctx context.Context, id int64) error {
	userLikeIdKey := fmt.Sprintf("%s%v", cacheUserLikeIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, userLikeIdKey)
	return err
}

func (m *defaultUserLikeModel) FindOne(ctx context.Context, id int64) (*UserLike, error) {
	userLikeIdKey := fmt.Sprintf("%s%v", cacheUserLikeIdPrefix, id)
	var resp UserLike
	err := m.QueryRowCtx(ctx, &resp, userLikeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userLikeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserLikeModel) Insert(ctx context.Context, data *UserLike) (sql.Result, error) {
	userLikeIdKey := fmt.Sprintf("%s%v", cacheUserLikeIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, userLikeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.User, data.ChatRecordId)
	}, userLikeIdKey)
	return ret, err
}

func (m *defaultUserLikeModel) Update(ctx context.Context, data *UserLike) error {
	userLikeIdKey := fmt.Sprintf("%s%v", cacheUserLikeIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userLikeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.User, data.ChatRecordId, data.Id)
	}, userLikeIdKey)
	return err
}

func (m *defaultUserLikeModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheUserLikeIdPrefix, primary)
}

func (m *defaultUserLikeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userLikeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserLikeModel) tableName() string {
	return m.table
}
