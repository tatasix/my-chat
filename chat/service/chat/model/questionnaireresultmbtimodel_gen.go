// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	questionnaireResultMbtiFieldNames          = builder.RawFieldNames(&QuestionnaireResultMbti{})
	questionnaireResultMbtiRows                = strings.Join(questionnaireResultMbtiFieldNames, ",")
	questionnaireResultMbtiRowsExpectAutoSet   = strings.Join(stringx.Remove(questionnaireResultMbtiFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	questionnaireResultMbtiRowsWithPlaceHolder = strings.Join(stringx.Remove(questionnaireResultMbtiFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheQuestionnaireResultMbtiIdPrefix = "cache:questionnaireResultMbti:id:"
)

type (
	questionnaireResultMbtiModel interface {
		Insert(ctx context.Context, data *QuestionnaireResultMbti) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*QuestionnaireResultMbti, error)
		Update(ctx context.Context, data *QuestionnaireResultMbti) error
		Delete(ctx context.Context, id int64) error
	}

	defaultQuestionnaireResultMbtiModel struct {
		sqlc.CachedConn
		table string
	}

	QuestionnaireResultMbti struct {
		Id           int64     `db:"id"`
		RelationId   int64     `db:"relation_id"`   // 关联id
		User         string    `db:"user"`          // weCom用户标识/customer用户标识
		OpenKfId     string    `db:"open_kf_id"`    // 客服标识
		Score        string    `db:"score"`         // 分数
		Name         string    `db:"name"`          // 类型名称
		NameType     string    `db:"name_type"`     // 类型
		ScoreResult  string    `db:"score_result"`  // 分数结果
		Nickname     string    `db:"nickname"`      // 昵称
		SimpleResult string    `db:"simple_result"` // 一句话结果
		Result       string    `db:"result"`        // 结论
		Label        string    `db:"label"`         // 标签
		Partner      string    `db:"partner"`       // 伴侣
		Mate         string    `db:"mate"`          // 拍档
		Content      string    `db:"content"`       // ai 生成内容
		PcImage      string    `db:"pc_image"`      // pc 图片
		H5Image      string    `db:"h5_image"`      // h5 图片
		Color        int64     `db:"color"`         // 颜色
		CreatedAt    time.Time `db:"created_at"`    // 创建时间
		UpdatedAt    time.Time `db:"updated_at"`    // 更新时间
		IsDeleted    int64     `db:"is_deleted"`    // 是否删除
	}
)

func newQuestionnaireResultMbtiModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultQuestionnaireResultMbtiModel {
	return &defaultQuestionnaireResultMbtiModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`questionnaire_result_mbti`",
	}
}

func (m *defaultQuestionnaireResultMbtiModel) Delete(ctx context.Context, id int64) error {
	questionnaireResultMbtiIdKey := fmt.Sprintf("%s%v", cacheQuestionnaireResultMbtiIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, questionnaireResultMbtiIdKey)
	return err
}

func (m *defaultQuestionnaireResultMbtiModel) FindOne(ctx context.Context, id int64) (*QuestionnaireResultMbti, error) {
	questionnaireResultMbtiIdKey := fmt.Sprintf("%s%v", cacheQuestionnaireResultMbtiIdPrefix, id)
	var resp QuestionnaireResultMbti
	err := m.QueryRowCtx(ctx, &resp, questionnaireResultMbtiIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", questionnaireResultMbtiRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultQuestionnaireResultMbtiModel) Insert(ctx context.Context, data *QuestionnaireResultMbti) (sql.Result, error) {
	questionnaireResultMbtiIdKey := fmt.Sprintf("%s%v", cacheQuestionnaireResultMbtiIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, questionnaireResultMbtiRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.RelationId, data.User, data.OpenKfId, data.Score, data.Name, data.NameType, data.ScoreResult, data.Nickname, data.SimpleResult, data.Result, data.Label, data.Partner, data.Mate, data.Content, data.PcImage, data.H5Image, data.Color, data.IsDeleted)
	}, questionnaireResultMbtiIdKey)
	return ret, err
}

func (m *defaultQuestionnaireResultMbtiModel) Update(ctx context.Context, data *QuestionnaireResultMbti) error {
	questionnaireResultMbtiIdKey := fmt.Sprintf("%s%v", cacheQuestionnaireResultMbtiIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, questionnaireResultMbtiRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.RelationId, data.User, data.OpenKfId, data.Score, data.Name, data.NameType, data.ScoreResult, data.Nickname, data.SimpleResult, data.Result, data.Label, data.Partner, data.Mate, data.Content, data.PcImage, data.H5Image, data.Color, data.IsDeleted, data.Id)
	}, questionnaireResultMbtiIdKey)
	return err
}

func (m *defaultQuestionnaireResultMbtiModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheQuestionnaireResultMbtiIdPrefix, primary)
}

func (m *defaultQuestionnaireResultMbtiModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", questionnaireResultMbtiRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultQuestionnaireResultMbtiModel) tableName() string {
	return m.table
}
