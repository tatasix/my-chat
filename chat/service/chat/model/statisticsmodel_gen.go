// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	statisticsFieldNames          = builder.RawFieldNames(&Statistics{})
	statisticsRows                = strings.Join(statisticsFieldNames, ",")
	statisticsRowsExpectAutoSet   = strings.Join(stringx.Remove(statisticsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	statisticsRowsWithPlaceHolder = strings.Join(stringx.Remove(statisticsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheStatisticsIdPrefix = "cache:statistics:id:"
)

type (
	statisticsModel interface {
		Insert(ctx context.Context, data *Statistics) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Statistics, error)
		Update(ctx context.Context, data *Statistics) error
		Delete(ctx context.Context, id int64) error
	}

	defaultStatisticsModel struct {
		sqlc.CachedConn
		table string
	}

	Statistics struct {
		Id             int64     `db:"id"`
		Date           time.Time `db:"date"`
		DailyActive    int64     `db:"daily_active"`    // 日活
		SevenActive    int64     `db:"seven_active"`    // 周活
		FifteenActive  int64     `db:"fifteen_active"`  // 半月活
		MonthlyActive  int64     `db:"monthly_active"`  // 月活
		TotalVisitor   int64     `db:"total_visitor"`   // 游客
		RegisteredUser int64     `db:"registered_user"` // 注册用户
		AddVisitor     int64     `db:"add_visitor"`     // 新增游客
		AddRegister    int64     `db:"add_register"`    // 新增注册用户
		CreatedAt      time.Time `db:"created_at"`      // 创建时间
		UpdatedAt      time.Time `db:"updated_at"`      // 更新时间
	}
)

func newStatisticsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultStatisticsModel {
	return &defaultStatisticsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`statistics`",
	}
}

func (m *defaultStatisticsModel) Delete(ctx context.Context, id int64) error {
	statisticsIdKey := fmt.Sprintf("%s%v", cacheStatisticsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, statisticsIdKey)
	return err
}

func (m *defaultStatisticsModel) FindOne(ctx context.Context, id int64) (*Statistics, error) {
	statisticsIdKey := fmt.Sprintf("%s%v", cacheStatisticsIdPrefix, id)
	var resp Statistics
	err := m.QueryRowCtx(ctx, &resp, statisticsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", statisticsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStatisticsModel) Insert(ctx context.Context, data *Statistics) (sql.Result, error) {
	statisticsIdKey := fmt.Sprintf("%s%v", cacheStatisticsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, statisticsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Date, data.DailyActive, data.SevenActive, data.FifteenActive, data.MonthlyActive, data.TotalVisitor, data.RegisteredUser, data.AddVisitor, data.AddRegister)
	}, statisticsIdKey)
	return ret, err
}

func (m *defaultStatisticsModel) Update(ctx context.Context, data *Statistics) error {
	statisticsIdKey := fmt.Sprintf("%s%v", cacheStatisticsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, statisticsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Date, data.DailyActive, data.SevenActive, data.FifteenActive, data.MonthlyActive, data.TotalVisitor, data.RegisteredUser, data.AddVisitor, data.AddRegister, data.Id)
	}, statisticsIdKey)
	return err
}

func (m *defaultStatisticsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheStatisticsIdPrefix, primary)
}

func (m *defaultStatisticsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", statisticsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultStatisticsModel) tableName() string {
	return m.table
}
