// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userPortraitFieldNames          = builder.RawFieldNames(&UserPortrait{})
	userPortraitRows                = strings.Join(userPortraitFieldNames, ",")
	userPortraitRowsExpectAutoSet   = strings.Join(stringx.Remove(userPortraitFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userPortraitRowsWithPlaceHolder = strings.Join(stringx.Remove(userPortraitFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUserPortraitIdPrefix = "cache:userPortrait:id:"
)

type (
	userPortraitModel interface {
		Insert(ctx context.Context, data *UserPortrait) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserPortrait, error)
		Update(ctx context.Context, data *UserPortrait) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserPortraitModel struct {
		sqlc.CachedConn
		table string
	}

	UserPortrait struct {
		Id                  int64     `db:"id"`
		User                string    `db:"user"`                 // 微信客户的external_userid
		Call                string    `db:"call"`                 // 称呼
		Age                 int64     `db:"age"`                  // 年龄
		Address             string    `db:"address"`              // 居住地址
		Career              string    `db:"career"`               // 职业
		Gender              int64     `db:"gender"`               // 性别
		SleepIsNormal       int64     `db:"sleep_is_normal"`      // 睡眠是否正常；1正常，2不正常
		AppetiteIsNormal    int64     `db:"appetite_is_normal"`   // 胃口是否正常；1正常，2不正常
		PsychologicalStress int64     `db:"psychological_stress"` // 心理压力程度，1-10的数字
		CreatedAt           time.Time `db:"created_at"`           // 创建时间
		UpdatedAt           time.Time `db:"updated_at"`           // 更新时间
	}
)

func newUserPortraitModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserPortraitModel {
	return &defaultUserPortraitModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_portrait`",
	}
}

func (m *defaultUserPortraitModel) Delete(ctx context.Context, id int64) error {
	userPortraitIdKey := fmt.Sprintf("%s%v", cacheUserPortraitIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, userPortraitIdKey)
	return err
}

func (m *defaultUserPortraitModel) FindOne(ctx context.Context, id int64) (*UserPortrait, error) {
	userPortraitIdKey := fmt.Sprintf("%s%v", cacheUserPortraitIdPrefix, id)
	var resp UserPortrait
	err := m.QueryRowCtx(ctx, &resp, userPortraitIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userPortraitRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserPortraitModel) Insert(ctx context.Context, data *UserPortrait) (sql.Result, error) {
	userPortraitIdKey := fmt.Sprintf("%s%v", cacheUserPortraitIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userPortraitRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.User, data.Call, data.Age, data.Address, data.Career, data.Gender, data.SleepIsNormal, data.AppetiteIsNormal, data.PsychologicalStress)
	}, userPortraitIdKey)
	return ret, err
}

func (m *defaultUserPortraitModel) Update(ctx context.Context, data *UserPortrait) error {
	userPortraitIdKey := fmt.Sprintf("%s%v", cacheUserPortraitIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userPortraitRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.User, data.Call, data.Age, data.Address, data.Career, data.Gender, data.SleepIsNormal, data.AppetiteIsNormal, data.PsychologicalStress, data.Id)
	}, userPortraitIdKey)
	return err
}

func (m *defaultUserPortraitModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheUserPortraitIdPrefix, primary)
}

func (m *defaultUserPortraitModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userPortraitRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserPortraitModel) tableName() string {
	return m.table
}
