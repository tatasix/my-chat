package assembler

import (
	"chat/common/util"
	"chat/service/chat/api/internal/types"
	"chat/service/chat/api/internal/vars"
	"chat/service/chat/model"
	"encoding/json"
	"strconv"
)

func POTODTOGetQuestionnaireResult(result *model.QuestionnaireResult) (dto types.QuestionnaireResult) {
	if result == nil {
		return
	}

	dto.Id = result.Id
	dto.RelationId = strconv.Itoa(int(result.RelationId))
	dto.User = result.User
	dto.OpenKfId = result.OpenKfId
	dto.Score = util.SqlToFloat64(result.Score)
	dto.Status = result.Status
	dto.Result = result.Result
	dto.CreatedAt = result.CreatedAt.Format(vars.TimeFormat)
	dto.UpdatedAt = result.UpdatedAt.Format(vars.TimeFormat)

	return
}

func POTODTOGetQuestionnaireResultUseMbti(result *model.QuestionnaireResult, mbti *model.QuestionnaireResultMbti) (dto types.QuestionnaireResult) {
	if result == nil {
		return
	}

	dto.Id = result.Id
	dto.RelationId = strconv.Itoa(int(result.RelationId))
	dto.User = result.User
	dto.OpenKfId = result.OpenKfId

	dto.Status = result.Status
	dto.CreatedAt = result.CreatedAt.Format(vars.TimeFormat)
	dto.UpdatedAt = result.UpdatedAt.Format(vars.TimeFormat)

	dto.Result = mbti.Result
	dto.Name = mbti.Name
	dto.NameType = mbti.NameType
	dto.Nickname = mbti.Nickname
	dto.SimpleResult = mbti.SimpleResult
	dto.Label = mbti.Label
	dto.Partner = mbti.Partner
	dto.Mate = mbti.Mate
	dto.Content = mbti.Content
	dto.PcImage = mbti.PcImage
	dto.H5Image = mbti.H5Image
	dto.Color = mbti.Color

	var scoreMbti []types.QuestionnaireResultMbtiScore

	_ = json.Unmarshal([]byte(mbti.Score), &scoreMbti)
	dto.ScoreMbti = scoreMbti

	return
}

func POTODTOGenerateResult(po *model.QuestionnaireResult) (dto types.GenerateResultResponse) {
	if po == nil {
		return
	}

	dto = types.GenerateResultResponse{
		Id:         po.Id,
		RelationId: strconv.Itoa(int(po.RelationId)),
		User:       po.User,
		OpenKfId:   po.OpenKfId,
		Score:      util.SqlToFloat64(po.Score),
		Status:     po.Status,
		Result:     po.Result,
		CreatedAt:  po.CreatedAt.Format(vars.TimeFormat),
		UpdatedAt:  po.UpdatedAt.Format(vars.TimeFormat),
	}
	return
}

func POTODTOGenerateResultByMbti(po *model.QuestionnaireResultMbti, result *model.QuestionnaireResult, mbitScores []model.QuestionnaireResultMbtiScore) (dto types.GenerateResultResponse) {
	if po == nil {
		return
	}

	dto = types.GenerateResultResponse{
		Id:           po.Id,
		RelationId:   strconv.Itoa(int(po.RelationId)),
		User:         po.User,
		OpenKfId:     po.OpenKfId,
		Result:       po.Result,
		CreatedAt:    result.CreatedAt.Format(vars.TimeFormat),
		UpdatedAt:    result.UpdatedAt.Format(vars.TimeFormat),
		Status:       result.Status,
		Name:         po.Name,
		NameType:     po.NameType,
		Nickname:     po.Nickname,
		ScoreMbti:    POTODTOQuestionnaireResultMbtiScore(mbitScores),
		SimpleResult: po.SimpleResult,
		Label:        po.Label,
		Partner:      po.Partner,
		Mate:         po.Mate,
		Content:      po.Content,
		PcImage:      po.PcImage,
		H5Image:      po.H5Image,
		Color:        po.Color,
	}

	return
}

func POTODTOQuestionnaireResultMbtiScore(pos []model.QuestionnaireResultMbtiScore) (dtos []types.QuestionnaireResultMbtiScore) {
	if len(pos) <= 0 {
		return
	}

	for _, po := range pos {
		dtos = append(dtos, types.QuestionnaireResultMbtiScore{
			Type:        po.Type,
			Score:       po.Score,
			Name:        po.Name,
			Description: po.Description,
		})
	}

	return
}

func POTODTOGetMbtiResultByRelationId(wechatUser *model.WechatUser, mbti *model.QuestionnaireResultMbti) (dto *types.GetMbtiResultByRelationResponse) {

	dto = &types.GetMbtiResultByRelationResponse{}

	if mbti == nil {
		return
	}
	dto.UserName = wechatUser.Name
	dto.UserNickname = wechatUser.Nickname

	dto.Id = mbti.Id
	dto.RelationId = strconv.Itoa(int(mbti.RelationId))
	dto.User = mbti.User
	dto.OpenKfId = mbti.OpenKfId

	dto.CreatedAt = mbti.CreatedAt.Format(vars.TimeFormat)
	dto.UpdatedAt = mbti.UpdatedAt.Format(vars.TimeFormat)

	dto.Result = mbti.Result
	dto.Name = mbti.Name
	dto.NameType = mbti.NameType
	dto.Nickname = mbti.Nickname
	dto.SimpleResult = mbti.SimpleResult
	dto.Label = mbti.Label
	dto.Partner = mbti.Partner
	dto.Mate = mbti.Mate
	dto.Content = mbti.Content
	dto.PcImage = mbti.PcImage
	dto.H5Image = mbti.H5Image
	dto.Color = mbti.Color

	var scoreMbti []types.QuestionnaireResultMbtiScore

	_ = json.Unmarshal([]byte(mbti.Score), &scoreMbti)
	dto.ScoreMbti = scoreMbti

	return
}

type AutoGenerated struct {
	Score  int      `json:"score"`
	Res    string   `json:"res"`
	Detail []Detail `json:"detail"`
}
type Detail struct {
	Name   string  `json:"name"`
	Desc   string  `json:"desc"`
	Type   int64   `json:"type"`
	Score  float64 `json:"score"`
	Topics []int   `json:"topics"`
	Res    string  `json:"res"`
}

func POTODTOGetResultToString(scores []model.QuestionnaireResultMbtiScore) (str string) {
	if len(scores) <= 0 {
		return
	}

	var de []Detail
	for _, po := range scores {
		de = append(de, Detail{
			Type:  po.Type,
			Score: po.Score,
			Name:  po.Name,
			Res:   po.Description,
		})
	}
	if len(de) > 0 {
		res := AutoGenerated{
			Detail: de,
		}
		scoreJson, _ := json.Marshal(res)
		str = string(scoreJson)
	}
	return
}
