// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	backend "chat/service/chat/api/internal/handler/backend"
	backendactivity "chat/service/chat/api/internal/handler/backend/activity"
	chatroom "chat/service/chat/api/internal/handler/chatroom"
	frontend "chat/service/chat/api/internal/handler/frontend"
	frontendactivity "chat/service/chat/api/internal/handler/frontend/activity"
	frontendquestionnaire "chat/service/chat/api/internal/handler/frontend/questionnaire"
	frontendrights "chat/service/chat/api/internal/handler/frontend/rights"
	open "chat/service/chat/api/internal/handler/open"
	tool "chat/service/chat/api/internal/handler/tool"
	"chat/service/chat/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AccessLog},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/user/register",
					Handler: UserRegisterHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/login",
					Handler: UserLoginHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upload/article",
					Handler: UploadArticleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete/collection",
					Handler: DeleteCollectionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/prompt/set",
					Handler: SetPromptHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/prompt/list",
					Handler: ListPromptHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/download/chat/history",
					Handler: DownloadChatHistoryHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/tool/sync-wechat-user",
					Handler: SyncWechatUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/find-get-application-config",
					Handler: FindApplicationConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/get-application-config",
					Handler: GetApplicationConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/create-application-config",
					Handler: CreateApplicationConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/update-application-config",
					Handler: UpdateApplicationConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/delete-application-config",
					Handler: DeleteApplicationConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/delete-application-config-by-ids",
					Handler: DeleteApplicationConfigByIdsHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/find-get-customer-config",
					Handler: FindCustomerConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/get-customer-config",
					Handler: GetCustomerConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/create-customer-config",
					Handler: CreateCustomerConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/update-customer-config",
					Handler: UpdateCustomerConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/delete-customer-config",
					Handler: DeleteCustomerConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/delete-customer-config-by-ids",
					Handler: DeleteCustomerConfigByIdsHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/create-sub-prompt",
					Handler: CreateSubPromptHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/update-sub-prompt",
					Handler: UpdateSubPromptHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/msg/get-chat",
					Handler: GetChatListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/msg/get-user-like",
					Handler: GetUserLikeListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/msg/export",
					Handler: ChatExportHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/feedback/get",
					Handler: GetFeedbackHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/feedback/find",
					Handler: FindFeedbackHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/like",
					Handler: UserLikeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/chinaCalendar",
					Handler: ChinaCalendarHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AccessLog},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/msg/push",
					Handler: ChatHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/msg/customer/push",
					Handler: CustomerChatHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/msg/last-chat-info",
					Handler: GetLastChatRecordHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/msg/generate-chat",
					Handler: AutoChatHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AccessLog, serverCtx.Trace},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/chat/index",
					Handler: frontend.ChatIndexHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/customer/chat",
					Handler: frontend.CustomerFrontendChatHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/customer/get-chat-record",
					Handler: frontend.GetCustomerChatRecordHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/login",
					Handler: frontend.LoginHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/login/login-by-code",
					Handler: frontend.LoginByCodeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/login/logout",
					Handler: frontend.LogoutHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/account/cancellation",
					Handler: frontend.SignoutHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/login/mobile-is-exists",
					Handler: frontend.MobileIsExistsHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/login/send-sms",
					Handler: frontend.SendSmsHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/login/signup-by-mobile",
					Handler: frontend.SignupByMobileHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/login/get-user",
					Handler: frontend.GetUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/login/update-login",
					Handler: frontend.UpdateLoginHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/login/update-password",
					Handler: frontend.UpdatePasswordHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/login/check-code",
					Handler: frontend.CheckCodePasswordHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upload",
					Handler: frontend.UploadHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/download",
					Handler: frontend.DownloadHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/config/get",
					Handler: frontend.GetConfigByTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/login/get-captcha",
					Handler: frontend.GetCaptchaHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/evaluation/socket",
					Handler: frontend.EvaluationSocketHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/wechat/get-info-by-code",
					Handler: frontend.GetInfoByCodeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/customer-config/get-by-type",
					Handler: frontend.GetCustomerConfigByTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/generate/unique-id",
					Handler: frontend.GenerateUniqueIdHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/wechat/get-share-config",
					Handler: frontend.GetShareConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/customer-config/get-by-types",
					Handler: frontend.GetCustomerConfigByTypesHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AccessLog, serverCtx.Login},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/chatroom/add",
					Handler: chatroom.ChatRoomAddHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/chatroom/delete",
					Handler: chatroom.ChatRoomDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/chatroom/join",
					Handler: chatroom.ChatRoomJoinHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/chatroom/get-by-id",
					Handler: chatroom.GetChatRoomByIdHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AccessLog},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/chatroom/socket",
					Handler: chatroom.ChatRoomSocketHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AccessLog},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/migrate/chat-log",
					Handler: tool.MigrateChatLogHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/chat/summarize",
					Handler: tool.SummarizeChatLogHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/chat/summarize-history",
					Handler: tool.SummarizeChatLogHistoryHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/batch-upload",
					Handler: tool.BatchUploadHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/activity/statistics",
					Handler: tool.StatisticsHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/question",
					Handler: tool.QuestionnaireQuestionHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/test",
					Handler: tool.TestHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cache/get",
					Handler: tool.GetCacheHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cache/set",
					Handler: tool.SetCacheHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cache/delete",
					Handler: tool.DeleteCacheHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/rights/expire",
					Handler: tool.RightsExpireHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/migrate/jwt",
					Handler: tool.MigrateJWTHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete-user",
					Handler: tool.DeleteUserVipHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/encrypt-mobile",
					Handler: tool.EncryptMobileHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/encrypt",
					Handler: tool.EncryptHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/decrypt",
					Handler: tool.DecryptHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AccessLog},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/open/wechat-authorize",
					Handler: open.WechatAuthorizeHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AccessLog},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/config/get",
					Handler: backend.GetConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/config/get-by-id",
					Handler: backend.GetConfigByIdHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/add",
					Handler: backend.AddConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/update",
					Handler: backend.UpdateConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/delete",
					Handler: backend.DeleteConfigHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AccessLog},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/statistics/get",
					Handler: backendactivity.GetStatisticsHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AccessLog},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/activity/add",
					Handler: frontendactivity.AddActivityLogHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/activity/change-user",
					Handler: frontendactivity.ChangeUserIdHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AccessLog, serverCtx.Login},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/login/refresh-token",
					Handler: frontend.RefreshTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/update-user",
					Handler: frontend.UpdateUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/update-user-password",
					Handler: frontend.UpdateUserPasswordHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/evaluation/get-socket",
					Handler: frontend.GetEvaluationSocketHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/feedback/save",
					Handler: frontend.SaveFeedbackHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/evaluation/get",
					Handler: frontend.GetEvaluationHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/wechat/get-redirect-url",
					Handler: frontend.GetRedirectUrlHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AccessLog, serverCtx.Login},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/rights/generate",
					Handler: frontendrights.GenerateRightsOrderHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/rights/check",
					Handler: frontendrights.CheckRightsHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/rights/get",
					Handler: frontendrights.GetRightsHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AccessLog},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/notify/wechat",
					Handler: frontendrights.NotifyWechatHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/notify/alipay",
					Handler: frontendrights.NotifyAlipayHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/notify/apple-pay",
					Handler: frontendrights.NotifyApplePayHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/config/get-pay",
					Handler: frontendrights.GetPayInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/rights/check-temp",
					Handler: frontendrights.CheckRightsTempHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/rights/apple-pay-confirm",
					Handler: frontendrights.ApplePayConfirmHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AccessLog, serverCtx.Login},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/questionnaire/get",
					Handler: frontendquestionnaire.GetQuestionnaireHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/questionnaire/save",
					Handler: frontendquestionnaire.SaveQuestionnaireHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/questionnaire/get-result",
					Handler: frontendquestionnaire.GetQuestionnaireResultHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/questionnaire/paly-another",
					Handler: frontendquestionnaire.PlayAnotherHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AccessLog},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/questionnaire/generate-result",
					Handler: frontendquestionnaire.GenerateResultHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/questionnaire/get-mbti-result-by-relation",
					Handler: frontendquestionnaire.GetMbtiResultByRelationHandler(serverCtx),
				},
			}...,
		),
	)
}
